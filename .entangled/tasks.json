{
  "task": [
    {
      "description": null,
      "creates": [
        "docs/fig/day04-ncards.png"
      ],
      "requires": [
        "src/Day04.jl",
        "input/day04.txt"
      ],
      "runner": "julia",
      "stdout": null,
      "stdin": null,
      "script": "#| creates: docs/fig/day04-ncards.png\n#| requires: src/Day04.jl input/day04.txt\n#| collect: figures\nusing CairoMakie\nusing AOC2023.Day04: card_p, play2, wins\n\nCairoMakie.activate!()\ncards = open(readlines, \"input/day04.txt\", \"r\") .|> (first \u2218 card_p)\n\nfig = Figure(size=(600, 1000))\nax = Axis(fig[2,1], yscale=log2)\nbarplot!(ax, 1:length(cards), play2(cards))\n\nfunction stack(ws)\n\theight = zeros(Int, length(ws))\n\tsegments = NTuple{2,Int}[]\n\tfor (i, w) in enumerate(ws)\n\t\th = maximum(height[i:i+w]) + 1\n\t\theight[i:i+w] .= h\n\t\tappend!(segments, ((i, h), (i+w, h)))\n\tend\n\tsegments\nend\n\nax = Axis(fig[1, 1])\nws = wins.(cards)\nlinesegments!(ax, stack(ws); color=:black, linewidth=14)\nlinesegments!(ax, stack(ws); color=ws, colormap=:deep, linewidth=10)\n\nsave(\"docs/fig/day04-ncards.svg\", fig) ",
      "path": null
    },
    {
      "description": "Pythagorean tree",
      "creates": [
        "docs/fig/pythagoras.png"
      ],
      "requires": [
        "examples/pythagoras.scm",
        "examples/pythagoras.css"
      ],
      "runner": "bash",
      "stdout": null,
      "stdin": null,
      "script": "#| creates: docs/fig/pythagoras.png\n#| description: Pythagorean tree\n#| requires: examples/pythagoras.scm examples/pythagoras.css\n#| collect: figures\nguile xml-gen.scm < examples/pythagoras.scm \\\n    | rsvg-convert -z 2 > docs/fig/pythagoras.png",
      "path": null
    },
    {
      "description": null,
      "creates": [],
      "requires": [
        "xml-gen.scm",
        "src/day05-data.scm"
      ],
      "runner": "bash",
      "stdout": "docs/fig/day05-flow.svg",
      "stdin": "src/viz-day05.scm",
      "script": "#| collect: figures\n#| stdout: docs/fig/day05-flow.svg\n#| stdin: src/viz-day05.scm\n#| requires: xml-gen.scm src/day05-data.scm\nguile xml-gen.scm",
      "path": null
    },
    {
      "description": null,
      "creates": [
        "src/day05-data.scm"
      ],
      "requires": [
        "src/Day05.jl",
        "input/day05.txt"
      ],
      "runner": "julia",
      "stdout": null,
      "stdin": null,
      "script": "#| requires: src/Day05.jl input/day05.txt\n#| creates: src/day05-data.scm\nusing AOC2023.Day05: read_input\nusing .Iterators: flatmap\n\nalmanak = open(read_input, \"input/day05.txt\", \"r\")\nforeach(x -> sort!(x.items; by=y -> y.range), almanak.maps)\n\nopen(\"src/day05-data.scm\", \"w\") do io\n  println(io, \"(make-almanak\")\n  println(io, \"  `(\")\n  ranges = map(x -> x[1]:x[1]+x[2]-1, eachcol(reshape(almanak.seeds, 2, :)))\n  for r in ranges\n    println(io, \"     ((,(make-range $(r.start) $(r.stop + 1)))\")\n    s = [r]\n    for m in almanak.maps\n        s = collect(flatmap(m, s))\n        print(io, \"      (\")\n        join(io, (\",(make-range $(r.start) $(r.stop + 1))\" for r in s), \" \")\n        println(io, \")\")\n    end\n    println(io, \"     )\")\n  end\n  println(io, \"   )\")\n  println(io, \"  `(\")\n  for m in almanak.maps\n    println(io, \"     ,(make-mapping \\\"$(m.from)\\\" \\\"$(m.to)\\\" `(\")\n    for i in m.items\n      println(io, \"       (,(make-range $(i.range.start) $(i.range.stop+1)) . $(i.offset))\")\n    end\n    println(io, \"     ))\")\n  end\n  println(io, \"   )\")\n  println(io, \")\")\nend",
      "path": null
    },
    {
      "description": "Create GraphViz plot",
      "creates": [
        "docs/fig/viz-day08.svg"
      ],
      "requires": [
        "src/Day08.jl",
        "input/day08.txt"
      ],
      "runner": "julia",
      "stdout": null,
      "stdin": null,
      "script": "#| creates: docs/fig/viz-day08.svg\n#| requires: src/Day08.jl input/day08.txt\n#| description: Create GraphViz plot\n#| collect: figures\n\nusing AOC2023.Day08: input_p, map_node\nusing GraphvizDotLang: digraph, edge, save, node, attr\n\ninput = open(\"input/day08.txt\", \"r\") do io\n  read(io, String) |> input_p |> first\nend\nnodes = collect(keys(input.network))\nm = length(input.instructions)\n\nstarts = nodes[occursin.(r\"..A\", nodes)]\nstep_map = Dict(\n  id => map_node(input.network, id, input.instructions)\n  for id in nodes)\n\n# gt = digraph()\n# for n in nodes\n#   gt |> edge(n, input.network[n].left) |>\n#        edge(n, input.network[n].right)\n# end\n# save(gt, \"docs/fig/day08-tree.svg\")\n\ng = digraph(;bgcolor=\"transparent\", nodesep=\"0.1\", ranksep=\"0.05\",\n            rankdir=\"TD\") |>\n    attr(:node; style=\"filled\", fillcolor=\"black\", fontcolor=\"white\", color=\"gray\", fontname=\"monospace\", fontsize=\"1\", margin=\"0.05\", width=\"0.05\", height=\"0.05\") |>\n    attr(:edge; color=\"gray\", arrowsize=\"0.3\")\nfor s in starts\n  g |> node(s; fillcolor=\"green\", fontsize=\"14\")\nend\nfor e in nodes[occursin.(r\"..Z\", nodes)]\n  g |> node(e; fillcolor=\"blue\", fontsize=\"10\")\nend\nfor id in nodes\n  g |> edge(id, map_node(input.network, id, input.instructions))\nend\nsave(g, \"docs/fig/viz-day08.svg\")",
      "path": null
    },
    {
      "description": "plot day 10",
      "creates": [
        "docs/fig/day10.svg"
      ],
      "requires": [
        "src/Day10.jl",
        "input/day10.txt"
      ],
      "runner": "julia",
      "stdout": null,
      "stdin": null,
      "script": null,
      "path": "src/viz-day10.jl"
    },
    {
      "description": null,
      "creates": [
        "output/day16-julia.txt"
      ],
      "requires": [
        "src/Day16.jl",
        "input/day16.txt"
      ],
      "runner": "julia",
      "stdout": null,
      "stdin": null,
      "script": "#| creates: output/day16-julia.txt\n#| requires: src/Day16.jl input/day16.txt\n#| collect: benchmarks\nusing BenchmarkTools\nusing AOC2023.Day16: part1a, borders\n\ninp = open(readlines, \"input/day16.txt\", \"r\") .|> codeunits |> stack |> permutedims\nopen(\"output/day16-julia.txt\", \"w\") do f_out\n    b = @benchmark maximum(((x, dx),) -> part1a(inp, x, dx), borders(size(inp)))\n    show(f_out, MIME(\"text/plain\"), b)\nend",
      "path": null
    },
    {
      "description": "run rust day 16",
      "creates": [],
      "requires": [
        "src/bin/day16.rs"
      ],
      "runner": "bash",
      "stdout": "output/day16-rust.txt",
      "stdin": "input/day16.txt",
      "script": "#| description: run rust day 16\n#| stdout: output/day16-rust.txt\n#| stdin: input/day16.txt\n#| requires: src/bin/day16.rs\n#| collect: benchmarks\ncargo run --release --bin day16 < input/day16.txt",
      "path": null
    },
    {
      "name": "figures",
      "requires": [
        "docs/fig/day04-ncards.png",
        "docs/fig/pythagoras.png",
        "docs/fig/day05-flow.svg",
        "docs/fig/viz-day08.svg",
        "docs/fig/day10.svg"
      ]
    },
    {
      "name": "benchmarks",
      "requires": [
        "output/day16-julia.txt",
        "output/day16-rust.txt"
      ]
    }
  ]
}